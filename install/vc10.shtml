---
layout: default
title: QuantLib Installation in Visual C++
---

<h1 class="center">QuantLib installation in VC++</h1>
<h5 class="center">Based on the initial instructions by Dominik Holenstein and Dimitri Reiswich</h4>

<p>These are step-by-step instructions to install QuantLib and Boost
on the Microsoft Visual C++ IDE.  These instructions work on recent
versions (you can download the latest free Community edition
<a href="https://visualstudio.microsoft.com/downloads/">on the
Microsoft web site</a>), but unfortunately the screenshots on this
page were taken a long time ago on Visual C++ 2010.  If you want to
contribute updated versions, that would be great.</p>

<p>Before using QuantLib, you need to install the Boost library on your
computer. Detailed instructions follow in the next section.</p>

<h2>Boost Installation</h2>
<p>We use the binary installer provided by the Boost project, that can
be downloaded from their
<a href="https://boostorg.jfrog.io/artifactory/main/release/">Artifactory</a>.</p>

<p>You'll have to enter the folder corresponding to the release you
want to download (we suggest to choose the latest version), then
the <tt>binaries</tt> folder, and then choose the installer
corresponding to your compiler and platform; for
instance, <tt>boost_1_81_0-msvc-14.3-64.exe</tt> for Visual C++ 2022
on a 64-bit system. Download and run the installer. Again, the figures
in this tutorial were produced a while ago and assumed that you
installed Boost 1.47 into the <tt>C:\Program
Files\Boost\boost_1_47</tt> folder; replace that with whatever folder
the installer creates for your newer version (for
instance, <tt>C:\local\boost_1_81_0</tt>).</p>

<h2>Boost and QuantLib Installation</h2>

<p>Here are the steps to make the installed Boost libraries available to QuantLib:</p>

<p><b>1.</b> Open Visual Studio and make sure you have activated the expert
settings. Go to <i>Tools/Settings</i> and make sure "Expert Settings"
is checked.  This might not be necessary in recent versions.</p>

<p><b>2.</b> If you haven't downloaded QuantLib yet, go to
<a href="https://github.com/lballabio/QuantLib/releases">its release page on GitHub</a>.</p>

<p><b>3.</b> Find the latest version and
download the zip archive to your local drive. Unzip the file wherever
you want; in the following, we'll assume that the QuantLib directory
is <tt>C:\Program Files\QuantLib</tt>.</p>

<p><b>4.</b> Open the QuantLib folder, then open the Visual Studio solution
called <tt>QuantLib.sln</tt> by double clicking
it. Choose <i>Release</i> from the configuration menu in the
toolbar.</p>

<p><b>5.</b> Open the Property Manager by clicking on <i>View/Property
Manager</i> (or <i>View/Other Windows/Property Manager</i>, depending
on your version of Visual Studio) and activate it.  Expand the project
node of QuantLib in the Property Manager and then
the <i>Configuration/Platform</i> nodes (see screenshot below).</p>

<p>Earlier Visual C++ versions used
<tt>Microsoft.cpp.&lt;Platform&gt;.users</tt> files for global
settings.  However, these files are now deprecated and, depending on
your Visual C++ version, might no longer be available.  If that is the
case, or if you want to follow Microsoft's advice anyway, create a new
property page as described
at <a href="https://docs.microsoft.com/en-us/cpp/build/create-reusable-property-configurations?view=vs-2019">this
link</a>, add it to all projects in the solution, and use that instead
of the <tt>.users</tt> files.</p>

<p>Select any of the new or global pages (or multi-select them
all), right-click, and select <i>Properties</i> to bring up the
property page window.</p>

<p class="center"><img src="pics/vc10/ql03.png" alt="Property
Pages"></p>

<p><b>6.</b> In the property page window, click on <i>VC++
Directories</i> on the left pane and add the paths for the Boost
directories in <i>Include Directories</i> and <i>Library
Directories</i> in the right pane. If you installed Boost
in <tt>C:\local\boost_1_81_0</tt>, you'll have to add that to the
include directories.  Instead, the folder to add to the library
directories has a name such
as <tt>C:\local\boost_1_01_0\lib32-msvc-12.0</tt>
or <tt>C:\local\boost_1_81_0\lib64-msvc-14.3</tt> which includes
compiler and build information; if you installed multiple ones, choose
the one corresponding to your configuration. Click the OK button to
set your changes.</p>

<p class="center"><img src="pics/vc10/ql04.png" alt="Directories
Dialog"></p>

<p><b>7.</b> Switch back to the <i>Solutions Explorer</i>, right-click on the
solution icon and choose <i>Build Solution</i> to build all
projects. Besides QuantLib, this will build the examples and run the
test suite. The process takes a while (it took 1h and 7 minutes to
build QuantLib and run the tests on a three-years old WinXP notebook
with 3 GB RAM and a 2 GHz Intel dual core processor).</p>

<p class="center"><img src="pics/vc10/ql06.png" alt="Build
Solution"></p>

<p>After finishing, the output should show no errors (and hopefully, a
shorter run time):
<pre>
14>  Test suite "Master Test Suite" passed with:
14>    1703 assertions out of 1703 passed
14>    460 test cases out of 460 passed
14>  
14>   
14>  Tests completed in 29 m 8 s
14>  
========== Build: 15 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
</pre>
</p>

<p>You are done with building QuantLib. If you want, you can build the
Debug version in the same way by choosing <i>Debug</i> from the
configuration menu as shown below. This will allow you to debug your
application later.</p>

<p class="center"><img src="pics/vc10/ql07.png" alt="Debug
Configuration"></p>

<h2>Quantlib Usage</h2>

<p>As an example of QuantLib usage, I create
a <tt>QuantLibTest </tt>folder in the <tt>C:\Program
Files\QuantLib</tt> folder and set up a Win32 Console Application in
Visual Studio by clicking <i>File/New Project/Win32 Console
Application</i>.</p>

<p class="center"><img src="pics/vc10/ql08.png" alt="New Project"></p>

<p>I've chosen the project name <tt>TestingQuantLib</tt>, then I
clicked on OK.  Click on the <i>Next</i> button on the Win32
Application Wizard.  Choose "Console application" as application type
and check "Empty project" in the additional options. Click
on <i>Finish</i>.</p>

<p class="center"><img src="pics/vc10/ql09.png" alt="Application
Wizard"></p>

<p> Choose, for example, the Release mode for that project.  Note that
very often, users don't setup a project correctly since they build
QuantLib in one mode and try to call it from a test program which runs
in some other mode.  If you built QuantLib in release mode, you should
build your project in release mode. If you build your project in debug
mode without ever building QuantLib in debug mode, you'll have link
errors.</p>

<p>To tell your project where to find QuantLib, open the project
properties by right-clicking on the project icon in the IDE.</p>

<p class="center"><img src="pics/vc10/ql10.png" alt="Open Project
Properties"></p>

<p>Go to <i>VC++ Directories</i>. You can see that the Boost folders
are already there, so you don't have to do anything to configure
them.</p>

<p class="center"><img src="pics/vc10/ql11.png" alt="Project
Properties"></p>

<p>Add the QuantLib path (<tt>C:\Program Files\QuantLib</tt> in this
example) to the include directories. The result should be as shown
below.</p>

<p class="center"><img src="pics/vc10/ql12.png" alt="QuantLib include directory"></p>

<p>Finally, you can add the QuantLib library
path <tt>C:\Program Files\QuantLib\lib</tt> to the library
directories, or you can go to <i>Configuration
Properties/Linker/General</i> and add it to <i>Additional Library
Directories</i>. Click <i>OK</i>.</p>

<p class="center"><img src="pics/vc10/ql13.png" alt="QuantLib library dir"></p>

<p>To test if the setup works, add the following program to
the <tt>TestingQuantLib</tt> project. The program tests some Date and
Calendar classes.</p>

<pre>
#include &lt;ql/quantlib.hpp&gt;
#include &lt;iostream&gt;

int main()
{
        QuantLib::Calendar myCal=QuantLib::UnitedKingdom();
        QuantLib::Date newYearsEve(31,QuantLib::Dec,2008);

        std::cout << "Name: "                       << myCal.name()<< std::endl;
        std::cout << "New Year is Holiday: "        << myCal.isHoliday(newYearsEve)<< std::endl;
        std::cout << "New Year is Business Day: "   << myCal.isBusinessDay(newYearsEve)<< std::endl;

        std::cout << "--------------- Date Counter --------------------" << std::endl;

        QuantLib::Date date1(28,QuantLib::Dec,2008);
        QuantLib::Date date2(04,QuantLib::Jan,2009);

        std::cout << "First Date: "            << date1 << std::endl;
        std::cout << "Second Date: "           << date2 << std::endl;
        std::cout << "Business Days Betweeen: "<< myCal.businessDaysBetween(date1,date2) << std::endl;
        std::cout << "End of Month 1. Date: "  << myCal.endOfMonth(date1) << std::endl;
        std::cout << "End of Month 2. Date: "  << myCal.endOfMonth(date2) << std::endl;

        double tmp;
        std::cin >> tmp;

        return 0;
}
</pre>

<p>Hit F5 to run the program. The output of the program should be:</p>

<p class="center"><img src="pics/vc10/ql14.png" alt="Program output"></p>

<p>One last thing: If you see some warnings after building, to get rid
of them open the project properties again, go to <i>Configuration
Properties/C/C++/Preprocessor/Preprocessor Definitions</i> and
add <tt>_SCL_SECURE_NO_DEPRECATE</tt> and <tt>_CRT_SECURE_NO_DEPRECATE</tt>
 to the definitions, as shown here:</p>

<p class="center"><img src="pics/vc10/ql15.png" alt="Preprocessor defs"></p>

<p>Now, building the TestingQuantLib project again shouldn't show you
any warnings anymore, just as in the Output window below.</p>

<p class="center"><img src="pics/vc10/ql16.png" alt="Test output"></p>

<p>We're done!</p>

