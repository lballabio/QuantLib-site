---
layout: default
title: QuantLib Installation on Mac OS X
---

<h1 class="center">QuantLib installation on Mac OS X</h1>
<h5 class="center">Based on an initial version by Jack Harvard</h5>

<h2>Boost Installation</h2>

<p>The preferred way to get Boost is through Homebrew
(<a href="http://brew.sh/">http://brew.sh/</a>). By default, Homebrew
will install Boost in <tt>/usr/local</tt> on older system versions and in
<tt>/opt/homebrew</tt> on newer ones; you can find out which by
running <tt>brew --prefix</tt>.  From Terminal, run:
<pre>
brew install boost
</pre>

<p>Alternatively, you can use MacPorts
(<a href="http://www.macports.org/">http://www.macports.org/</a>)
which installs in <tt>/opt/local</tt> instead.</p>

<h2>QuantLib Installation</h2>

<h3>Installation from Homebrew</h3>

<p>If you don't need to modify the library, you might try to skip the
compilation and install a precompiled binary version.  Unofficial
binaries are available from Homebrew; run</p>
<pre>
brew install quantlib
</pre>
<p>to install it.  If you want to modify the library,
instead, you'll have to compile it yourself as described in the next
section.</p>

<h3>Installation from a released version</h3>

<p>Download QuantLib from its download page on GitHub, located
at <a href="https://github.com/lballabio/QuantLib/releases">https://github.com/lballabio/QuantLib/releases</a>.
You want to download the tar.gz package (at the time of this writing,
1.29 is the latest version) and extract it by running
<pre>
tar xzvf QuantLib-1.29.tar.gz
</pre>
in Terminal.  To install QuantLib, enter the folder you just created:
<pre>
cd QuantLib-1.29
</pre>
</p>

<p><strong>On Mac OS X 10.11 (El Capitan) and later,</strong> you'll
need to pass additional environment variables to <tt>./configure</tt>
(thanks to Albert Azout for pointing it out). Run:
<pre>
./configure --with-boost-include=/opt/homebrew/include/ \
            --prefix=${HOME}/local/ \
            CXXFLAGS='-O2 -stdlib=libc++ -mmacosx-version-min=10.9' \
            LDFLAGS='-stdlib=libc++ -mmacosx-version-min=10.9'
</pre>
(mind the backslash on the end of the lines; it tells the terminal to
continue on the next line.  You might also discard the backslash and
write the whole command on a single line.) If your Boost installation
is not in <tt>/opt/homebrew</tt>, change the paths above accordingly.
The <tt>--prefix</tt> flag specifies where QuantLib will be installed;
in this example, a folder <tt>local</tt> in your home folder, but you
can pass a different one.  For QuantLib 1.22 only, you will also need
to add <tt>-std=c++11</tt> to <tt>CXXFLAGS</tt>; later versions add
their required <tt>-std</tt> flag automatically, while previous
versions don't need it.
</p>
<p><strong>On Mac OS X 10.9 (Mavericks) and 10.10 (Yosemite),</strong>
you'll need to pass different environment variables. Run:
<pre>
./configure --with-boost-include=/usr/local/include/ \
            --prefix=${HOME}/local/ \
            CXXFLAGS='-O2 -stdlib=libstdc++ -mmacosx-version-min=10.6' \
            LDFLAGS='-stdlib=libstdc++ -mmacosx-version-min=10.6'
</pre>
Again, for QuantLib 1.22 only, add <tt>-std=c++11</tt> to <tt>CXXFLAGS</tt>
and change your paths as needed.
</p>
<p><strong>On earlier systems,</strong> it's not necessary to pass
most environment variables, so the command can be simplified to:
<pre>
./configure --with-boost-include=/usr/local/include/ \
            --prefix=${HOME}/local/ \
            CXXFLAGS='-O2'
</pre>
Again, for QuantLib 1.22 only, add <tt>-std=c++11</tt> to <tt>CXXFLAGS</tt>
and change your paths as needed.
</p>
<p><strong>Also, if you only intend to build the QuantLib Python
module</strong>, you might want to pass the <tt>--disable-shared</tt>
option to <tt>./configure</tt> to only build a static library and
avoid problems with dynamic loading.</p>

<p>Finally, run:</p>
<pre>
make
</pre>
to compile (you can use <tt>make -j4</tt> or <tt>make -j8</tt> to
speed up compilation if you have multiple cores) and
<pre>
make install
</pre>
to install; if you specified a prefix outside your home folder, you
might need <tt>sudo make install</tt> instead.</p>
<p>The above also installs a script <tt>quantlib-config</tt> that can
be used to pass necessary flags to the compiler when using QuantLib.
If you passed <tt>${HOME}/local/</tt> as the prefix, like in the
example above, the script will be in <tt>${HOME}/local/bin</tt>;
you can add it to your executable path by running
<pre>
export PATH="${PATH}:${HOME}/local/bin"
</pre>
after which you should be able to run, for instance,
<pre>
quantlib-config --cflags
</pre>
and see a number of compilation flags printed.  (Note that the new
value of <tt>PATH</tt> will be reset when you close the terminal; see
the documentation of your shell to see how to make it permanent.)</p>

<p>At this point, you can try to compile and run the examples. For instance,
<pre>
cd Examples/BermudanSwaption
g++ `quantlib-config --cflags` BermudanSwaption.cpp -o bermudanswaption `quantlib-config --libs`
./bermudanswaption
</pre>
Note that you might have to add more flags to the command above: some
users report it working as is, while others report having to add the
same <tt>-stdlib</tt> and <tt>-mmacosx-version-min</tt> used in the
compilation of QuantLib.</p>
